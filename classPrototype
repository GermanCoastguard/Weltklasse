// functionX_controller
// _controller: Impliziert, dass diese Variable das Verhalten der Klasse steuert oder verwaltet.
// functionX_dependency
// _dependency: Deutet darauf hin, dass die Klasse auf diese Variable angewiesen ist, aber nicht unbedingt von ihr gesteuert wird.
// functionX_recursive
// _recursive: Deutet darauf hin, dass die Klasse auf diese Variable angewiesen ist, aber nicht unbedingt von ihr gesteuert wird.


const possibleActionButtonTypes_controller = [ /* Diese Variable wird vom Benutzer definiert. */
      "delete",
      "edit",
      "add",
      "create",
];

export class ActionButton {
      constructor(actionType, possibleActionTypes = possibleActionButtonTypes_controller) {
      this.actionType = actionType;
      this.possibleActionTypes = possibleActionTypes;
      // this.reqiurements wird primär für this._debug() verwendet. Falls in Erwägung gezogen wird, Werte aus this.requirements in anderen Methoden anzuwenden, berücksichten dass this._debug nicht mehr wie gewünscht funktioniert.
      this.requirements = {
            actionType: this.actionType,
            possibleActionTypes: this.possibleActionTypes,
      },

      this._menuButtonAction(actionType);
      }



      _menuButtonAction(actionType) {
            this._debug();
            return;
            if (!actionType) {
                  return;
            } else { 
                  console.clear();
                  console.log("attr action-type ist vergeben.") }
      }
      _returnValue(actionType) {
            // Soll eine Funktion triggern , basierend auf dem actiontype
      }
      _debug() {
            const handleRequirements = () => {
                  // __________________ Working as Intended Start __________________

                  if (!this.requirements) {
                        console.clear();
                        return console.log(`
                    

                  Es sind keine [Requirements] definiert.
                  (Falls keine Requirements definiert werden sollen )
                 
                  
                  `);
                  }
                  // __________________ Working as Intended End __________________
                  const requirements = Object.entries(this.requirements);
                  let count = 0;
                  for (const [key, val] of requirements) {
                        count++
                        console.log(`
                    
      requirement ${count} of ${requirements.length} =>  ${key} = ${val}
                  
                  `);
                  }

            }
            handleRequirements();


            
            // console.log(this.requirements.actionType);

            // console.log(`
              
            //                 ${this.requirements}
            
            // `);
            
            // console.log(`
                  
            //       this.actiontype = ${this.actionType}
            
            // `);
      }
}
